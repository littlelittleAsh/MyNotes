1、对 UE项目 的理解（来源于gpt，还未验证）：
    所有用虚幻引擎搭建的游戏/项目，无论多简单，底层其实都在构建一个完整的三维世界。哪怕看起来像 2D 的游戏，底层依然是运行在一个有 原点、坐标轴、世界单位、相机和场景图（Scene Graph） 的 3D 空间里。
（1）是否都以一个完整的 3D 世界为基础？  是的。
    UE4/UE5 中的世界架构就是一个三维空间，存在：
      📌三维坐标系（X 前后，Y 左右，Z 上下）；
      📌单位是厘米（默认，1 UE 单位 = 1 cm）；
      📌世界原点 是 FVector(0, 0, 0)；
      📌所有 Actor 都放在这个坐标空间内；
      📌包括相机、光源、粒子、UI 等也都有自己的三维位置。
      📌即使你做一个“菜单界面”或“平面化”的游戏，它实际上也是贴在一个 3D 世界的平面上渲染出来的。
（2）不同类型的游戏（或项目）对 相机 的控制方式 
      第一人称（FPS）	        相机绑定角色头部，360°旋转，自由移动
      第三人称（TPS）	        相机在角色后方，部分旋转自由
      策略游戏（RTS）	        相机漂浮在空中，限制旋转和高度
      剧情游戏（如《底特律》）	相机切换固定角度，移动范围受控
      2D 横版（平台跳跃）	    相机跟随角色，固定在 XY 平面，Z 被限制
      虚拟展厅/漫游	          相机可自由飞行，无碰撞，典型自由导航场景
      UI 场景	                相机通常固定，镜头指向 UI 空间中的 3D Widget 或 Actor
2、对 虚幻引擎 的理解（来源于gpt，还未验证）：
    虚幻引擎运行一个三维世界，用户通过 C++（或蓝图）把自己的“逻辑和行为”注入进这个世界的各种“位置”和“角色”中，由ue负责运行和维持。
    如何做的？可以用“世界 + 模块挂件 + 行为脚本”的视角来理解：
        （1）. 世界是一个有坐标和规则的空间
                  📌世界有原点 (0,0,0)；
                  📌世界有时间（tick）；
                  📌世界有重力、光照、碰撞、导航、物理等等全套规则；
              这些规则由引擎自动维持（你不用从零构建物理引擎）。
        （2）. 用户可以往世界中“扔东西”（叫做 Actor）
                  📌每个物体（Actor）都是世界中的一个“节点”；
                  📌Actor 上可以加 Component（组件）来增加功能，比如：网格组件（形状）、粒子组件（视觉）、音频组件（声音）、碰撞组件、相机组件、自定义逻辑
组件（你写的类）。
         （3）. 引擎运行时会：
                  a、按顺序初始化这个世界；
                  b、把你挂载到各个 Actor/Component 上的 C++ 类加载出来；
                  c、调用你定义的 BeginPlay()、Tick()、OnHit() 等等；
                  d、最终生成每一帧画面（渲染）+ 每一帧逻辑（游戏行为）；
                  e、监听输入、碰撞、物理反馈等事件，不断更新世界状态。















