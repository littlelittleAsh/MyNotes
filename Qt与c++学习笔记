1、QWidget 是 Qt 中最基础的 GUI 控件类，本身并不包含视觉元素，而是作为所有图形界面元素的基类。
2、QML 是 Qt 提供的一种声明性语言，Qt Quick 是 Qt 提供的一套模块，用来结合 QML 语言实现现代图形用户界面。
3、Build System 是用来构建（编译和链接）应用程序的系统。它决定了如何从源代码生成可执行文件、库或其他目标文
  件，并且指定了如何管理构建过程中的各种工具和步骤。
  （1）qmake老工具，根据 .pro 文件生成指定平台的构建指令
  （2）cmake新工具，跨平台，使用 CMakeLists.txt 文件来配置项目的构建过程，其中定义了源文件、编译选项、库依
      赖等信息
  （3）Ninja，作为大项目的快速构建工具
4、.pro 配置文件中：
    （1）greaterThan(__,__): ，功能相当于：？
    （2）$${__} 为替换函数前缀
5、裸指针对应的3类新指针：（内存泄漏问题）
    （1）std::unique_ptr：唯一对象所有权，通过禁止拷贝构造和赋值实现，仅可通过std::move“转移”所有权；
    （2）std::shared_ptr：共享对象所有权，由内置的（引用计数）控制块实现计数为0时释放对象；
    （3）std::weak_ptr: 专门为shared的循环引用问题设计，仅作为观察者存在。
6、封装 Ui_Widget 为 Ui::Widget
   在include其他文件时，可以借鉴用命名空间封装的方式来避免命名冲突，同时极大的提升代码的层次性和可读性。
7、界面文件 .ui 最终会被 uic（user interface complier）工具转换为c++代码，通常在ui_widget.h等文件中，
   其并不直接参与应用的启动。
8、
